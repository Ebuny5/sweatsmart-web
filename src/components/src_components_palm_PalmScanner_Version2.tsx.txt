import React, { useRef, useState, useEffect, useCallback } from 'react';
import SensorDashboard from '@/components/SensorDashboard';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { useToast } from '@/hooks/use-toast';
import { Droplets, Activity, AlertTriangle, Stethoscope, Info, Sparkles, Camera as CameraIcon, Upload as UploadIcon } from 'lucide-react';
import { analyzeImage } from '@/services/geminiService';

export default function PalmScanner() {
  // Camera and image states
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [stream, setStream] = useState<MediaStream | null>(null);
  const [cameraError, setCameraError] = useState<string | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [result, setResult] = useState<any>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const { toast } = useToast();

  // Sensor Dashboard states
  const [hrStatus, setHrStatus] = useState<'disconnected' | 'connecting' | 'connected'>('disconnected');
  const [gsrStatus, setGsrStatus] = useState<'disconnected' | 'connecting' | 'connected'>('disconnected');
  const [hrData, setHrData] = useState<number | null>(null);
  const [gsrData, setGsrData] = useState<number | null>(null);
  const [simulationScenario, setSimulationScenario] = useState<'Resting' | 'Exercise' | 'Normal'>('Normal');

  // Sensor connect/disconnect simulation
  const handleConnectSensors = () => {
    if (hrStatus === 'connected') {
      setHrStatus('disconnected');
      setGsrStatus('disconnected');
      setHrData(null);
      setGsrData(null);
    } else {
      setHrStatus('connecting');
      setGsrStatus('connecting');
      setTimeout(() => {
        setHrStatus('connected');
        setGsrStatus('connected');
        // Simulate sensor data based on scenario
        if (simulationScenario === 'Resting') {
          setHrData(78);
          setGsrData(3.1);
        } else if (simulationScenario === 'Exercise') {
          setHrData(120);
          setGsrData(3.5);
        } else {
          setHrData(90);
          setGsrData(2.0);
        }
      }, 1200);
    }
  };

  // Loading messages
  const loadingMessages = [
    "Calibrating hyperhidrosis detectors...",
    "Analyzing image and sensor data...",
    "Distinguishing between sweat and external sources...",
    "Cross-referencing with dermatological patterns...",
    "Assessing pore-level activity...",
    "Identifying potential triggers...",
    "Compiling personalized recommendations...",
    "Finalizing your detailed report...",
  ];
  const [messageIndex, setMessageIndex] = useState(0);
  useEffect(() => {
    if (!isAnalyzing) return;
    const interval = setInterval(() => {
      setMessageIndex((prev) => (prev + 1) % loadingMessages.length);
    }, 2000);
    return () => clearInterval(interval);
  }, [isAnalyzing]);

  const startCamera = useCallback(async () => {
    try {
      setCameraError(null);
      const mediaStream = await navigator.mediaDevices.getUserMedia({
        video: {
          facingMode: 'environment',
          width: { ideal: 1280 },
          height: { ideal: 720 }
        }
      });
      setStream(mediaStream);
      if (videoRef.current) {
        videoRef.current.srcObject = mediaStream;
      }
    } catch (err) {
      setCameraError("Could not access the camera. Please check permissions and try again.");
    }
  }, []);

  useEffect(() => {
    startCamera();
    return () => {
      if (stream) {
        stream.getTracks().forEach(track => track.stop());
      }
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const base64Image = e.target?.result as string;
        if (base64Image) {
          handleAnalyze(base64Image, file.type);
        }
      };
      reader.readAsDataURL(file);
    }
  };

  const handleUploadClick = () => {
    fileInputRef.current?.click();
  };

  const handleCapture = () => {
    if (videoRef.current && canvasRef.current) {
      const video = videoRef.current;
      const canvas = canvasRef.current;

      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;

      const context = canvas.getContext('2d');
      if (context) {
        context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);
        const dataUrl = canvas.toDataURL('image/jpeg', 0.9);
        handleAnalyze(dataUrl, 'image/jpeg');
      }
    }
  };

  // ANALYZE FUNCTION THAT USES SENSOR DATA
  const handleAnalyze = async (base64ImageDataUrl: string, mimeType: string) => {
    setIsAnalyzing(true);
    setResult(null);
    setImagePreview(base64ImageDataUrl);

    try {
      toast({ title: "Analysis started", description: "The AI is analyzing your image and sensor data..." });
      const base64Data = base64ImageDataUrl.split(',')[1];
      const analysis = await analyzeImage(base64Data, mimeType, hrData, gsrData);
      setResult(analysis);

      toast({
        title: "SweatSmart Analysis Complete",
        description: `Analysis complete with ${Math.round(analysis.confidence)}% confidence`,
      });
    } catch (error) {
      toast({
        title: "Scan Error",
        description: `Failed to analyze: ${error instanceof Error ? error.message : 'Unknown error occurred'}`,
        variant: "destructive",
      });
      setImagePreview(null);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleReset = () => {
    setResult(null);
    setImagePreview(null);
    startCamera();
  };

  const getSeverityColor = (level: number) => {
    if (level <= 2) return 'bg-success';
    if (level <= 4) return 'bg-warning';
    if (level <= 6) return 'bg-orange-500';
    if (level <= 8) return 'bg-destructive';
    return 'bg-red-700';
  };

  return (
    <div className="w-full max-w-2xl mx-auto">
      {/* --- SENSOR DASHBOARD --- */}
      <SensorDashboard
        hrStatus={hrStatus}
        gsrStatus={gsrStatus}
        hrData={hrData}
        gsrData={gsrData}
        onConnect={handleConnectSensors}
        simulationScenario={simulationScenario}
        setSimulationScenario={setSimulationScenario}
      />

      {/* --- RESULTS --- */}
      {result && imagePreview ? (
        <Card>
          <CardHeader>
            <div className="flex justify-between items-start">
              <CardTitle className="text-2xl">Analysis Results</CardTitle>
              <Badge variant="outline" className="text-base">{result.confidence}% Confidence</Badge>
            </div>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Image Preview */}
            <div className="rounded-lg overflow-hidden border">
              <img src={imagePreview} alt="Analyzed" className="w-full h-auto object-cover max-h-64" />
            </div>
            {/* AI Analysis Notes with Moisture Source */}
            {result.analysisNotes && (
              <div className="bg-muted/50 border rounded-lg p-4 space-y-3">
                <div className="flex items-start gap-3">
                  <Info className="h-5 w-5 text-primary mt-0.5 flex-shrink-0" />
                  <div className="flex-1">
                    <h3 className="font-semibold mb-1">AI Analysis Note</h3>
                    <p className="text-sm text-muted-foreground">{result.analysisNotes}</p>
                  </div>
                </div>
                {result.moistureSource && (
                  <div className="pt-3 border-t flex items-center gap-3">
                    <Sparkles className="h-5 w-5 text-primary flex-shrink-0" />
                    <span className="font-semibold text-sm">Suspected Moisture Source:</span>
                    <Badge 
                      variant={result.moistureSource === 'Hyperhidrosis' ? 'default' : result.moistureSource === 'External Moisture' ? 'destructive' : 'secondary'}
                      className="text-sm"
                    >
                      {result.moistureSource}
                    </Badge>
                  </div>
                )}
              </div>
            )}
            {/* Severity Assessment */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <AlertTriangle className="h-5 w-5 text-primary" />
                <h3 className="font-semibold">Severity Assessment</h3>
              </div>
              <div className="flex items-center justify-between mb-2">
                <span className="font-medium">Level {result.severity.level}/10</span>
                <Badge className={getSeverityColor(result.severity.level)}>
                  {result.severity.assessment}
                </Badge>
              </div>
              <Progress value={result.severity.level * 10} className="h-2" />
            </div>
            {/* Sweat Gland Activity */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <Activity className="h-5 w-5 text-primary" />
                <h3 className="font-semibold">Sweat Gland Activity</h3>
              </div>
              <div className="flex items-center justify-between mb-2">
                <span className="font-medium">{result.sweatGlandActivity.level}% Active</span>
                <Badge variant="secondary">{result.sweatGlandActivity.assessment}</Badge>
              </div>
              <Progress value={result.sweatGlandActivity.level} className="h-2" />
            </div>
            {/* Detected Triggers */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <Droplets className="h-5 w-5 text-primary" />
                <h3 className="font-semibold">Detected Triggers</h3>
              </div>
              <div className="flex flex-wrap gap-2">
                {result.detectedTriggers.map((trigger: string, index: number) => (
                  <Badge key={index} variant="outline">
                    {trigger}
                  </Badge>
                ))}
              </div>
            </div>
            {/* Treatment Recommendations */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <Stethoscope className="h-5 w-5 text-primary" />
                <h3 className="font-semibold">Treatment Recommendations</h3>
              </div>
              <div className="space-y-3">
                <div className="p-4 bg-primary/10 rounded-lg">
                  <p className="font-semibold text-primary mb-1">Primary Treatment</p>
                  <p className="text-sm">{result.treatmentRecommendations.primary}</p>
                </div>
                <div>
                  <p className="text-sm font-semibold mb-2">Alternative Options:</p>
                  <div className="flex flex-wrap gap-2">
                    {result.treatmentRecommendations.alternative.map((treatment: string, index: number) => (
                      <Badge key={index} variant="secondary">
                        {treatment}
                      </Badge>
                    ))}
                  </div>
                </div>
              </div>
            </div>
            {/* Disclaimer */}
            <div className="p-4 bg-warning/10 border-l-4 border-warning rounded-r-lg">
              <p className="text-sm">
                ⚠️ This analysis works for palms, hands, feet, and soles. Results are for informational purposes only. 
                Consult with a healthcare professional for proper diagnosis and treatment of hyperhidrosis.
              </p>
            </div>
            {/* Reset Button */}
            <button
              onClick={handleReset}
              className="w-full px-6 py-3 bg-primary text-primary-foreground font-semibold rounded-lg shadow hover:bg-primary/90 transition"
            >
              Analyze Another Image
            </button>
          </CardContent>
        </Card>
      ) : isAnalyzing ? (
        // Loading State
        <Card>
          <CardContent className="p-8 text-center">
            <div className="flex justify-center items-center mb-6">
              <Activity className="h-10 w-10 text-primary animate-spin" />
            </div>
            <h2 className="text-xl font-bold mb-2">Analyzing...</h2>
            <p className="text-muted-foreground transition-opacity duration-500">
              {loadingMessages[messageIndex]}
            </p>
          </CardContent>
        </Card>
      ) : cameraError ? (
        // Camera Error
        <Card className="border-destructive">
          <CardHeader>
            <CardTitle className="text-destructive">Camera Error</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p className="text-muted-foreground">{cameraError}</p>
            <div className="flex flex-col sm:flex-row gap-4">
              <button
                onClick={startCamera}
                className="flex-1 px-6 py-3 bg-primary text-primary-foreground font-semibold rounded-lg shadow hover:bg-primary/90 transition"
              >
                Retry Camera
              </button>
              <button
                onClick={handleUploadClick}
                className="flex-1 inline-flex items-center justify-center px-6 py-3 bg-secondary text-secondary-foreground font-semibold rounded-lg shadow hover:bg-secondary/90 transition"
              >
                <UploadIcon className="h-5 w-5 mr-2" />
                Upload an Image
              </button>
            </div>
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileSelect}
              className="hidden"
              accept="image/*"
            />
          </CardContent>
        </Card>
      ) : (
        // Camera Capture Interface
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Droplets className="h-5 w-5 text-primary" />
              HyperScanner
            </CardTitle>
            <p className="text-sm text-muted-foreground">
              Use your camera for a live scan or upload an existing image
            </p>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* Video Preview */}
            <div className="relative w-full aspect-video bg-black rounded-lg overflow-hidden">
              <video ref={videoRef} autoPlay playsInline className="w-full h-full object-cover" />
              {!stream && (
                <div className="absolute inset-0 bg-black/50 flex items-center justify-center">
                  <p className="text-white animate-pulse">Starting camera...</p>
                </div>
              )}
            </div>
            <canvas ref={canvasRef} className="hidden" />
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileSelect}
              className="hidden"
              accept="image/*"
            />
            {/* Action Buttons */}
            <div className="flex flex-col sm:flex-row gap-4">
              <button
                onClick={handleCapture}
                disabled={!stream}
                className="flex-1 inline-flex items-center justify-center px-8 py-3 bg-primary text-primary-foreground font-semibold rounded-lg shadow hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed transition"
              >
                <CameraIcon className="h-6 w-6 mr-2" />
                Scan with Camera
              </button>
              <button
                onClick={handleUploadClick}
                className="flex-1 inline-flex items-center justify-center px-8 py-3 bg-secondary text-secondary-foreground font-semibold rounded-lg shadow hover:bg-secondary/90 transition"
              >
                <UploadIcon className="h-6 w-6 mr-2" />
                Upload Image
              </button>
            </div>
            {/* Info */}
            <div className="p-4 bg-muted/50 rounded-lg">
              <p className="text-sm text-muted-foreground">
                This analysis is for informational purposes only. Consult with a healthcare professional for a medical diagnosis.
              </p>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}